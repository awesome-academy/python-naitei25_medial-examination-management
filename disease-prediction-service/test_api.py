#!/usr/bin/env python3
"""
Test script for Disease Prediction API
Ch·∫°y script n√†y ƒë·ªÉ test c√°c API endpoints
"""

import requests
import json

BASE_URL = "http://localhost:5000"

def test_get_symptoms():
    """Test API l·∫•y danh s√°ch tri·ªáu ch·ª©ng"""
    print("üîç Testing GET /api/symptoms...")
    try:
        response = requests.get(f"{BASE_URL}/api/symptoms")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Success! Found {len(data['symptoms'])} symptoms")
            print(f"Sample symptoms: {data['symptoms'][:5]}")
        else:
            print(f"‚ùå Failed with status code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_get_diseases():
    """Test API l·∫•y danh s√°ch b·ªánh"""
    print("\nüîç Testing GET /api/diseases...")
    try:
        response = requests.get(f"{BASE_URL}/api/diseases")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Success! Found {len(data['diseases'])} diseases")
            print(f"Sample diseases: {data['diseases'][:5]}")
        else:
            print(f"‚ùå Failed with status code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_predict():
    """Test API d·ª± ƒëo√°n b·ªánh"""
    print("\nüîç Testing POST /api/predict...")
    
    # Test v·ªõi m·ªôt s·ªë tri·ªáu ch·ª©ng ph·ªï bi·∫øn
    test_symptoms = ["headache", "fever", "cough"]
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/predict",
            json={"symptoms": test_symptoms},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Prediction successful!")
            print(f"Predicted disease: {data['predicted_disease_vn']}")
            print(f"Confidence: {data['confidence']:.2%}")
            print(f"Top predictions: {len(data['top_predictions'])}")
            
            # Hi·ªÉn th·ªã top 3 predictions
            for i, pred in enumerate(data['top_predictions'][:3]):
                print(f"  {i+1}. {pred['disease_vn']} ({pred['probability']:.2%})")
                
        else:
            print(f"‚ùå Failed with status code: {response.status_code}")
            print(f"Error: {response.text}")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_invalid_request():
    """Test API v·ªõi request kh√¥ng h·ª£p l·ªá"""
    print("\nüîç Testing invalid request...")
    
    try:
        # Test v·ªõi symptoms r·ªóng
        response = requests.post(
            f"{BASE_URL}/api/predict",
            json={"symptoms": []},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 400:
            print("‚úÖ Correctly handled empty symptoms")
        else:
            print(f"‚ùå Expected 400, got {response.status_code}")
            
        # Test v·ªõi symptoms kh√¥ng t·ªìn t·∫°i
        response = requests.post(
            f"{BASE_URL}/api/predict",
            json={"symptoms": ["invalid_symptom_123"]},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            print("‚úÖ Handled invalid symptoms gracefully")
        else:
            print(f"‚ùå Unexpected response: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """Main test function"""
    print("üöÄ Starting API tests...")
    print("=" * 50)
    
    # Test c√°c endpoints
    test_get_symptoms()
    test_get_diseases()
    test_predict()
    test_invalid_request()
    
    print("\n" + "=" * 50)
    print("‚ú® API testing completed!")
    print("\nüí° Tips:")
    print("- Make sure the Flask app is running on http://localhost:5000")
    print("- Check the console output for any errors")
    print("- Use the web interface at http://localhost:5000 for manual testing")

if __name__ == "__main__":
    main()

